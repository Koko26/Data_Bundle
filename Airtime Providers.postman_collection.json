{
	"info": {
		"_postman_id": "58844ef0-6f7e-4b95-aeb0-6ace7674f663",
		"name": "Airtime Providers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/airtime/providers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airtime",
						"providers"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var easyMoni = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Valid response with status code 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"     pm.response.to.be.ok\r",
							"});\r",
							"\r",
							"var easyMoni = JSON.parse(responseBody);\r",
							"pm.test(\"Succces Message\", function () {\r",
							"    pm.expect(easyMoni.message).to.eql('Successful')\r",
							"});\r",
							"\r",
							"pm.test(\"Request is successful\", function () {\r",
							"  pm.expect(easyMoni.requestSuccessful).to.eql(true)\r",
							"});\r",
							"\r",
							"pm.test(\"First and Last names are present and not empty\", function () {\r",
							"     pm.expect(easyMoni.responseData.firstName).to.eql('Nalat');\r",
							"     pm.expect(easyMoni.responseData.lastName).to.eql('Muda');\r",
							"});\r",
							"\r",
							"var accessToken = easyMoni.responseData.token.token\r",
							"pm.environment.set(\"access_token\", accessToken);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"info@spaceso2o.com\",\r\n  \"password\": \"Rensource1$\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Auth/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"billerID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[0].billerId).is.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"billerID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[1].billerId).is.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"billerID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[2].billerId).is.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"billerID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[3].billerId).is.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"biller Category ID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[0].billCategoryId).is.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"biller Category ID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[1].billCategoryId).is.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"biller Category ID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[2].billCategoryId).is.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"biller Category ID is greater than zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[3].billCategoryId).is.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[0].name).to.eql('9MOBILE');\r",
							"});\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[1].name).to.eql('AIRTEL');\r",
							"});\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[2].name).to.eql('GLO');\r",
							"});\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseData[3].name).to.eql('MTN');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/airtime/providers",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"airtime",
						"providers"
					]
				}
			},
			"response": []
		}
	]
}